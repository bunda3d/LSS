// <auto-generated />
using System;
using LSS.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LSS.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210605205414_publish2")]
    partial class publish2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LSS.Shared.Entities.About", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmpImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpTitle")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmpYrsOfService")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("About");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorDyeName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ColorHexCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ColorHsvCode")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ColorName")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ColorPantoneCode")
                        .HasColumnType("varchar(30)");

                    b.Property<int>("ColorUsedInProductId")
                        .HasColumnType("int");

                    b.Property<bool>("WasUsedInProductionFlag")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Anniversary")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EmpHireDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("EmpImg")
                        .HasColumnType("varchar(MAX)");

                    b.Property<string>("EmpName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmpSkillsSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmpTitle")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("EmpYrsOfService")
                        .HasColumnType("int");

                    b.Property<string>("Employer")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("LSS.Shared.Entities.PatternStyle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PatternStyleName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<int>("PatternUsedInPoId")
                        .HasColumnType("int");

                    b.Property<int>("PatternUsedInProductId")
                        .HasColumnType("int");

                    b.Property<bool>("WasUsedInProductionFlag")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PatternStyles");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomerFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmployeeFlag")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVendorFlag")
                        .HasColumnType("bit");

                    b.Property<string>("NameFirst")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameLast")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NameMI")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Photo")
                        .HasColumnType("varchar(MAX)");

                    b.HasKey("Id");

                    b.ToTable("People");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewRelease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnClearance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnSale")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTrending")
                        .HasColumnType("bit");

                    b.Property<int?>("PatternStyleId")
                        .HasColumnType("int");

                    b.Property<string>("Poster")
                        .HasColumnType("varchar(MAX)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<int>("ProductNumber")
                        .HasColumnType("int");

                    b.Property<int>("QtyInStock")
                        .HasColumnType("int");

                    b.Property<int>("QtyOrderedOnPO")
                        .HasColumnType("int");

                    b.Property<int>("SaleLengthInDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SalesEventStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SellStartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("SizeMeasureId")
                        .HasColumnType("int");

                    b.Property<int?>("SizeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StyleId")
                        .HasColumnType("int");

                    b.Property<string>("Summary")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("varchar(120)");

                    b.Property<decimal>("UnitCostOnPO")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Video")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("PatternStyleId");

                    b.HasIndex("SizeMeasureId");

                    b.HasIndex("SizeTypeId");

                    b.HasIndex("StyleId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("LSS.Shared.Entities.ProductsCategories", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductsCategories");
                });

            modelBuilder.Entity("LSS.Shared.Entities.ProductsPeople", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("varchar(120)");

                    b.HasKey("ProductId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("ProductsPeople");
                });

            modelBuilder.Entity("LSS.Shared.Entities.SizeMeasure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SizeMeasureCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SizeMeasureName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SizeMeasures");
                });

            modelBuilder.Entity("LSS.Shared.Entities.SizeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SizeTypeCode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("SizeTypeName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("SizeTypes");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("StarRatingScoreAvg")
                        .HasColumnType("decimal(1,1)");

                    b.Property<int>("StarRatingScoreEvent")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StarRatings");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRatingsPeople", b =>
                {
                    b.Property<int>("StarRatingId")
                        .HasColumnType("int");

                    b.Property<int>("PersonId")
                        .HasColumnType("int");

                    b.HasKey("StarRatingId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("StarRatingsPeople");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRatingsProducts", b =>
                {
                    b.Property<int>("StarRatingId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("StarRatingId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("StarRatingsProducts");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Style", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StyleAssociatedWith")
                        .HasColumnType("varchar(120)");

                    b.Property<string>("StyleDescription")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("StyleIsTrendingFlag")
                        .HasColumnType("bit");

                    b.Property<string>("StyleIsTrendingReason")
                        .HasColumnType("varchar(240)");

                    b.Property<string>("StyleName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StyleSimilarTo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Styles");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Anniversary")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PersonId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Customer", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Person", "Person")
                        .WithOne("CustomerId")
                        .HasForeignKey("LSS.Shared.Entities.Customer", "PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Employee", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Person", "Person")
                        .WithOne("EmployeeId")
                        .HasForeignKey("LSS.Shared.Entities.Employee", "PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Product", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("LSS.Shared.Entities.PatternStyle", "PatternStyle")
                        .WithMany()
                        .HasForeignKey("PatternStyleId");

                    b.HasOne("LSS.Shared.Entities.SizeMeasure", "SizeMeasure")
                        .WithMany()
                        .HasForeignKey("SizeMeasureId");

                    b.HasOne("LSS.Shared.Entities.SizeType", "SizeType")
                        .WithMany()
                        .HasForeignKey("SizeTypeId");

                    b.HasOne("LSS.Shared.Entities.Style", "Style")
                        .WithMany()
                        .HasForeignKey("StyleId");

                    b.Navigation("Color");

                    b.Navigation("PatternStyle");

                    b.Navigation("SizeMeasure");

                    b.Navigation("SizeType");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("LSS.Shared.Entities.ProductsCategories", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Category", "Category")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSS.Shared.Entities.Product", "Product")
                        .WithMany("ProductsCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LSS.Shared.Entities.ProductsPeople", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Person", "Person")
                        .WithMany("ProductsPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSS.Shared.Entities.Product", "Product")
                        .WithMany("ProductsPeople")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRatingsPeople", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Person", "Person")
                        .WithMany("StarRatingsPeople")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSS.Shared.Entities.StarRating", "StarRating")
                        .WithMany("StarRatingsPeople")
                        .HasForeignKey("StarRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("StarRating");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRatingsProducts", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Product", "Product")
                        .WithMany("StarRatingsProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LSS.Shared.Entities.StarRating", "StarRating")
                        .WithMany("StarRatingsProducts")
                        .HasForeignKey("StarRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("StarRating");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Vendor", b =>
                {
                    b.HasOne("LSS.Shared.Entities.Person", "Person")
                        .WithOne("VendorId")
                        .HasForeignKey("LSS.Shared.Entities.Vendor", "PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Category", b =>
                {
                    b.Navigation("ProductsCategories");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Person", b =>
                {
                    b.Navigation("CustomerId");

                    b.Navigation("EmployeeId");

                    b.Navigation("ProductsPeople");

                    b.Navigation("StarRatingsPeople");

                    b.Navigation("VendorId");
                });

            modelBuilder.Entity("LSS.Shared.Entities.Product", b =>
                {
                    b.Navigation("ProductsCategories");

                    b.Navigation("ProductsPeople");

                    b.Navigation("StarRatingsProducts");
                });

            modelBuilder.Entity("LSS.Shared.Entities.StarRating", b =>
                {
                    b.Navigation("StarRatingsPeople");

                    b.Navigation("StarRatingsProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
