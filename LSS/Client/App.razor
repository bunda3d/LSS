<!--mostly for lazyloading-->
@inject LazyAssemblyLoader lazyLoader
@using Microsoft.AspNetCore.Components.WebAssembly.Services
@using System.Reflection

<Router AppAssembly="@typeof(Program).Assembly" 
  OnNavigateAsync="OnNavigateAsync"
  AdditionalAssemblies="lazyLoadedAssemblies"  
  PreferExactMatches="@true" 
  >
    <Found Context="routeData">
      <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
          <Authorizing>
            <Loading InfoText="Authorizing..." />
          </Authorizing>
          <NotAuthorized>
            <Loading InfoText="User Not Authorizing... " />
          </NotAuthorized>
      </AuthorizeRouteView>
    </Found>
    <NotFound>
      <CascadingAuthenticationState>
        <LayoutView Layout="@typeof(MainLayout)">
            <Loading InfoText="Sorry, there's nothing at this address..." />
        </LayoutView>
      </CascadingAuthenticationState>

    </NotFound>
</Router>


@code {
  private List<Assembly> lazyLoadedAssemblies = new List<Assembly>();

  private async Task OnNavigateAsync(NavigationContext args)
  {
    if (args.Path.EndsWith("counter"))
    {
      var assemblies = await lazyLoader.LoadAssembliesAsync(
        new List<string> { "MathNet.Numerics.dll" });
      lazyLoadedAssemblies.AddRange(assemblies);
    }
  }
}