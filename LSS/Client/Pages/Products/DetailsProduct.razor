@page "/product/{ProductId:int}"
@page "/product/{ProductId:int}/{ProductName}"
@inject IProductRepository productRepository

	@if (model == null)
	{
		<div class="container">
			<div class="row text-center">
				<text class="text-info">Loading...</text>
			</div>
			<div class="row">
				<img src="/img/loading.gif" asp-append-version="true" width="300px"/>
			</div>
		</div>	
	}
	else
	{
		<h2>@model.Product.Title (@model.Product.SellStartDate.Value.ToString("yyyy"))</h2>
		for (int i = 0; i < model.Categories.Count; i++)
		{
			if (i < model.Categories.Count - 1)
			{
				@linkCategory(model.Categories[i])<text>, </text>
			}
			else
			{
				@linkCategory(model.Categories[i])
			}
		}
		<text> | </text> <span>@model.Product.SellStartDate.Value.ToString("yyyy/MM/dd")</span>

		<div class="d-flex flex-row px-0 justify-content-start align-items-start marquis no-gutters">
			<div class="mr-2 px-0">
				<img src="@model.Product.Poster" class="product-poster" />
			</div>
			<div class="col mx-0 px-0 video-container text-center">
				<iframe width="100%" height="auto" 
				  align="middle" 
					class="video" 
					src="https://www.youtube.com/embed/@model.Product.Video?autoplay=1&modestbranding=1&showinfo=0"
					modestbranding=1 
					frameborder=0 
					allowfullscreen>
				</iframe>
			</div>
		</div>

		<div class="col mt-3 p-0">
			<h3>Summary</h3>
			<div>
				<RenderMarkdown MarkdownContent="@model.Product.Summary" />
			</div>
		</div>

		<div class="col mt-3 p-0">
			<h3>People & Roles</h3>
			<div class="col px-0">
				@foreach(var person in model.People)
				{
					<div class="mb-1">
						<img class="thumb" src="@person.Photo" />
						<span class="d-inline-block">
							<a href="/person/@person.Id/@person.FullName.Replace(" ", "-")">
								@person.FullName
							</a>
						</span>
						<span class="d-inline-block">...</span>
						<span>@person.Role</span>
					</div>
				}
			</div>
		</div>
	}


@code {
	[Parameter] public int ProductId { get; set; }
	[Parameter] public string ProductName { get; set; }
	private RenderFragment<Category> linkCategory = (category) =>
			@<a href="products/search?categoryId=@category.Id">@category.Name</a>
	;
	DetailsProductDTO model;


	protected async override Task OnInitializedAsync()
	{
		model = await productRepository.GetDetailsProductDTO(ProductId);
	}
}
