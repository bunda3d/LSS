@page "/product/edit/{ProductId:int}"
@inject IProductRepository productRepository
@inject NavigationManager navigationManager
@attribute [Authorize]

<h3>Edit Product</h3>

@if (Product != null)
{
	<ProductForm Product="Product"	
		OnValidSubmit="Edit"
		SelectedPeople="SelectedPeople"
		NotSelectedCategories="NotSelectedCategories"
		SelectedCategories="SelectedCategories"/>
}


@code {
	[Parameter] public int ProductId { get; set; }
	//do not make new entity on Edit (like on Create)
	private Product Product;
	private List<Person> SelectedPeople;
	private List<Category> SelectedCategories;
	private List<Category> NotSelectedCategories;

	protected async override Task OnInitializedAsync()
	{
		var model = await productRepository.GetProudctForUpdate(ProductId);
		Product = model.Product;
		SelectedPeople = model.People;
		SelectedCategories = model.SelectedCategories;
		NotSelectedCategories = model.NotSelectedCategories;
	}

	private async Task Edit()
	{
		await productRepository.UpdateProduct(Product);
    navigationManager.NavigateTo($"product/{ProductId}/{Product.Title.Replace(" ", "-")}");

		Console.WriteLine("Editing the product: ");
		Console.WriteLine($"{Product.Id} : {Product.Title}");
	}
}
