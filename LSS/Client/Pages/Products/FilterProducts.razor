@page "/product/search"
<!--inject IRepository repository-->
@inject IProductRepository productRepository
@inject ICategoryRepository categoryRepository

<h3>Search Products</h3>



<EditForm Model="productFilterDTO">
<div class="col form col-xl-8 col-lg-10 col-md-12 py-3 px-0">

  <div class="row">

    <div class ="col-md my-3 form-group">
      <label for="title" class="sr-only">Title</label>
      <input type="text" 
        class="form-control" 
        id="title" 
        placeholder="Product Title"
        @bind-value="productFilterDTO.Title" 
        @bind-value:event="oninput"
        @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"
      />
    </div>
    <div class="col-md my-3 form-group">
      <select 
        class="form-control" 
        id="select-category"
        placeholder="--Select a Category--"
        @bind="productFilterDTO.CategoryId">
        @*
        <option value="0">
          --Select a Category--
        </option>
        *@
        @foreach (var category in Categories)
        {
          <option value="@category.Id">@category.Name</option>
        }
      </select>
    </div>
  </div>
  <div class="row">

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@productFilterDTO.IsInStock"
          class="custom-control-input" 
          id="IsInStockFlag">

			  <label class="custom-control-label" for="IsInStockFlag">
          In Stock (In Stock items are available for purchase)
        </label>
      </div>
		</div>

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@productFilterDTO.IsTrending" 
          class="custom-control-input" 
          id="IsTrendingFlag">

			  <label class="custom-control-label" for="IsTrendingFlag">
          Trending (trending items have nearly sold out)
        </label>
      </div>
		</div>

		<div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@isMarkedDownFlag" 
          class="custom-control-input" 
          id="isMarkedDownFlag">

			  <label class="custom-control-label" for="isMarkedDownFlag">
          Sale items
        </label>
      </div>
		</div>

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@onClearanceFlag" 
          class="custom-control-input" 
          id="onClearanceFlag">

			  <label class="custom-control-label" for="onClearanceFlag">
          Clearance items
        </label>
      </div>
		</div>
  </div>
  <div class="row my-3">
    <button type="button" 
      class="btn btn-outline-primary mb-2 mx-sm-3" 
      @onclick="SearchForProducts">
        Filter
      </button>

     
    <button type="button" 
      class="btn btn-outline-danger mb-2 mx-sm-3" 
      @onclick="ClearSearch">
        Clear
      </button>
    </div>
  <hr/>
</div>
</EditForm>

<!--display search results-->
<ProductList Products="Products"></ProductList>

@code {
  //vars to display search results:
  private List<Product> Products;
  private ProductFilterDTO productFilterDTO = new ProductFilterDTO();
  //vars for search form:
  string title = "";
  string selectedCategory = "0";
  bool isInStockFlag = true;
  bool isTrendingFlag = false;
  bool isMarkedDownFlag = false;
  bool onClearanceFlag = false;
  private List<Category> Categories = new List<Category>();

  protected async override Task OnInitializedAsync()
  {
    Categories = await categoryRepository.GetCategories();
    await LoadProducts();
  }

  private async Task LoadProducts()
  {
    var paginatedResponse = await productRepository.GetFilteredProducts(productFilterDTO);
    Products = paginatedResponse.Response;
  }








  private async Task SearchForProducts()
  {
    await LoadProducts();

    //console logging
    Console.WriteLine($"title: {title}");
    Console.WriteLine($"selectedCategory: {selectedCategory}");
    Console.WriteLine($"isMarkedDownFlag: {isMarkedDownFlag}");
    Console.WriteLine($"OnClearanceFlag: {onClearanceFlag}");
  }
  
  private async Task ClearSearch()
  {
    productFilterDTO.Title = "";
    productFilterDTO.CategoryId = 0;
    productFilterDTO.IsInStock = false;
    productFilterDTO.IsTrending = false;
    @*productFilterDTO.isMarkedDownFlag = false;*@
    @*productFilterDTO.onClearanceFlag = false;*@

    await LoadProducts();
  }

  private void TitleKeyPress(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      SearchForProducts();
    }
  }
}
