@page "/product/search"
<!--inject IRepository repository-->
@inject IProductRepository productRepository
@inject ICategoryRepository categoryRepository
@inject NavigationManager navigationManager
<!-- Use attribute to Require Authorization to view this page -->
<!-- @* @attribute [Authorize] *@ -->

<h3>Search Products</h3>

<EditForm Model="productFilterDTO">
<div class="col form col-xl-8 col-lg-10 col-md-12 py-3 px-0">

  <div class="row">

    <div class ="col-md my-3 form-group">
      <label for="title" class="sr-only">Title</label>
      <input type="text" 
        class="form-control" 
        id="title" 
        placeholder="Product Title"
        @bind-value="productFilterDTO.Title" 
        @bind-value:event="oninput"
        @onkeypress="@((KeyboardEventArgs e) => TitleKeyPress(e))"
      />
    </div>
    <div class="col-md my-3 form-group">
      <select 
        class="form-control" 
        id="select-category"
        @bind="productFilterDTO.CategoryId">
        <option value="0">
          --Select a Category--
        </option>
        @foreach (var category in Categories)
        {
          <option value="@category.Id">@category.Name</option>
        }
      </select>
    </div>
  </div>
  <div class="row">

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox"
          @bind="@productFilterDTO.IsInStock"
          class="custom-control-input" 
          id="IsInStockFlag">

			  <label class="custom-control-label" for="IsInStockFlag">
          In Stock (available for purchase)
        </label>
      </div>
		</div>

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@productFilterDTO.IsTrending" 
          class="custom-control-input" 
          id="IsTrendingFlag">

			  <label class="custom-control-label" for="IsTrendingFlag">
          Trending (nearly sold out)
        </label>
      </div>
		</div>

		<div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@productFilterDTO.IsOnSale" 
          class="custom-control-input" 
          id="isOnSaleFlag">

			  <label class="custom-control-label" for="isOnSaleFlag">
          Sale items (discounted up-to 25%)
        </label>
      </div>
		</div>

    <div class="col-md form-group my-3">
      <div class="custom-control custom-switch">
			  <input type="checkbox" 
          @bind="@productFilterDTO.IsOnClearance" 
          class="custom-control-input" 
          id="onClearanceFlag">

			  <label class="custom-control-label" for="onClearanceFlag">
          Clearance items (over 25% off)
        </label>
      </div>
		</div>
  </div>

  <div class="row my-3">
    <button type="button" 
      class="btn btn-outline-primary mb-2 mx-sm-3" 
      @onclick="SearchForProducts">
        Filter
      </button>

     
    <button type="button" 
      class="btn btn-outline-danger mb-2 mx-sm-3" 
      @onclick="ClearSearch">
        Clear
      </button>
    </div>
  <hr/>
</div>
</EditForm>

<Pagination 
  CurrentPage="productFilterDTO.Page" 
  TotalAmountPages="totalAmountPages"
  SelectedPage="SelectedPage"
  />

<!--display search results-->
<ProductList Products="Products"></ProductList>


<Pagination 
  CurrentPage="productFilterDTO.Page" 
  TotalAmountPages="totalAmountPages"
  SelectedPage="SelectedPage"
  />


@code {
  //vars to display search results:
  private List<Product> Products;
  private ProductFilterDTO productFilterDTO = new ProductFilterDTO() { RecordsPerPage = 10 };
  private int totalAmountPages;
  private List<Category> Categories = new List<Category>();

  protected async override Task OnInitializedAsync()
  {
    var queryStrings = navigationManager.GetQueryStrings(navigationManager.Uri);
    Categories = await categoryRepository.GetCategories();
    if (queryStrings != null)
    {
      FillFilterWithQueryStrings(queryStrings);
    }
    await LoadProducts();
  }

  private void FillFilterWithQueryStrings(Dictionary<string, string> queryStrings)
  {
    if (queryStrings.ContainsKey("categoryId"))
    {
      productFilterDTO.CategoryId = int.Parse(queryStrings["categoryId"]);
    }

    if (queryStrings.ContainsKey("title"))
    {
      productFilterDTO.Title = queryStrings["title"];
    }
    
    if (queryStrings.ContainsKey("isInStock"))
    {
      productFilterDTO.IsInStock = bool.Parse(queryStrings["isInStock"]);
    }

    if (queryStrings.ContainsKey("isTrending"))
    {
      productFilterDTO.IsTrending = bool.Parse(queryStrings["isTrending"]);
    }

    if (queryStrings.ContainsKey("isOnSale"))
    {
      productFilterDTO.IsOnSale = bool.Parse(queryStrings["isOnSale"]);
    }

    if (queryStrings.ContainsKey("isOnClearance"))
    {
      productFilterDTO.IsOnClearance = bool.Parse(queryStrings["isOnClearance"]);
    }

    if (queryStrings.ContainsKey("page"))
    {
      productFilterDTO.Page = int.Parse(queryStrings["page"]);
    }
  }

  private async Task SelectedPage(int page)
  {
    productFilterDTO.Page = page;
    await LoadProducts();
  }

  private async Task LoadProducts()
  {
    var queryString = GenerateQueryString();
    if (!string.IsNullOrWhiteSpace(queryString))
    {
      queryString = $"?{queryString}";
      navigationManager.NavigateTo($"product/search/{queryString}");
    }
    var paginatedResponse = await productRepository.GetFilteredProducts(productFilterDTO);
    Products = paginatedResponse.Response;
    totalAmountPages = paginatedResponse.TotalAmountPages;
  }

  private string GenerateQueryString()
  {
    var queryStringsDict = new Dictionary<string, string>();
    queryStringsDict["categoryId"] = productFilterDTO.CategoryId.ToString();
    queryStringsDict["title"] = productFilterDTO.Title ?? "";
    queryStringsDict["inStock"] = productFilterDTO.IsInStock.ToString();
    queryStringsDict["onClearance"] = productFilterDTO.IsOnClearance.ToString();
    queryStringsDict["onSale"] = productFilterDTO.IsOnSale.ToString();
    queryStringsDict["trending"] = productFilterDTO.IsTrending.ToString();
    queryStringsDict["page"] = productFilterDTO.Page.ToString();

    var defaultValue = new List<string>() { "false", "", "0" };

    // example result: categoryID=4&title=classic&inStock=true.......

    return string.Join("&", queryStringsDict
      .Where(x => !defaultValue.Contains(x.Value.ToLower()))
      .Select(x => $"{x.Key}={System.Web.HttpUtility.UrlEncode(x.Value)}")
      .ToArray());
  }






  private async Task SearchForProducts()
  {
    await LoadProducts();
  }
  
  private async Task ClearSearch()
  {
    productFilterDTO.Title = "";
    productFilterDTO.CategoryId = 0;
    productFilterDTO.IsInStock = true;
    productFilterDTO.IsTrending = false;
    productFilterDTO.IsOnSale = false;
    productFilterDTO.IsOnClearance = false;

    await LoadProducts();
  }

  private async Task TitleKeyPress(KeyboardEventArgs e)
  {
    if (e.Key == "Enter")
    {
      await SearchForProducts();
    }
  }
}
