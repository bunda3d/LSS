@page "/product/create"
@inject NavigationManager navigationManager
@inject IProductRepository productRepository
@inject ICategoryRepository categoryRepository

<h3>Create Product</h3>

@if (NotSelectedCategories != null)
{
	<ProductForm Product="Product"	
		OnValidSubmit="SaveProduct" 
		NotSelectedCategories="NotSelectedCategories" />
}


@code {

	private Product Product = new Product();

	protected async override Task OnInitializedAsync()
	{
		NotSelectedCategories = await categoryRepository.GetCategories();
	}
	private List<Category> NotSelectedCategories;

	private async Task SaveProduct()
	{
		try
		{
		// Redirect on Save
			var productId = await productRepository.CreateProduct(Product);
			navigationManager.NavigateTo($"product/{productId}/{Product.Title.Replace(" ", "-")}");
			//Console.WriteLine(navigationManager.Uri);
		}
		catch (Exception e)
		{

		}
	}
		
	//private List<Category> NotSelectedCategories = new List<Category>()
	//{
			//new Category(){ Id = 1, Name = "Suits"  },
			//new Category(){ Id = 2, Name = "Pants"  },
			//new Category(){ Id = 3, Name = "Shirts" },
			//new Category(){ Id = 4, Name = "Ties"   },
			//new Category(){ Id = 5, Name = "Shoes"  },
			//new Category(){ Id = 6, Name = "Socks"  },
			//new Category(){ Id = 7, Name = "Belts"  }
	//};

}

