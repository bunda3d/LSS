@inject IPersonRepository personRepository


<div class="form row my-4">
	<EditForm Model="Product" 
		OnValidSubmit="OnDataAnnotationsValidated"
		class="col-xl-8" >
		<DataAnnotationsValidator />

		<!--IDs-->

		<div class="form-row g-5">
			<div class="form-group col-md-6 my-3">
				<label for="ProductNumber">Product Number:</label>
					<InputNumber class="form-control col-11" 
					@bind-Value="@Product.ProductNumber"
					placeholder="123456" />
					<ValidationMessage For="@(() => Product.ProductNumber)" />	 
			</div>

			<div class="form-group col-md-6 my-3">
				<label for="Title">Title:</label>
					<InputText class="form-control col-11" 
					@bind-Value="@Product.Title"
					placeholder="Descriptive product sentence" />
					<ValidationMessage For="@(() => Product.Title)" />	 
			</div>
		</div>
		
		<!--Sales Switches-->

		<div class="mb-4">
		  <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.IsOnSale" 
            class="custom-control-input" id="IsOnSale">

			    <label class="custom-control-label" for="IsOnSale">
            Sale Item? (marked-down up-to 25%)
          </label>
        </div>
		  </div>

      <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.IsOnClearance" 
            class="custom-control-input" id="IsOnClearance">

			    <label class="custom-control-label" for="IsOnClearance">
            Clearance Item? (marked-down over 25%)
          </label>
        </div>
		  </div>
    
		  <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.IsTrending" 
            class="custom-control-input" id="IsTrending">

			    <label class="custom-control-label" for="IsTrending">
            Trending? (will auto. trend if less than 25% original stock)
          </label>
        </div>
		  </div>

      <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.IsFeatured" 
            class="custom-control-input" id="IsFeatured">

			    <label class="custom-control-label" for="IsFeatured">
            Featured? (Will list in top row of sales splash page)
          </label>
        </div>
		  </div>
		</div>

		<!--Price-->

		<div class="form-row g-5">
		  <div class="form-group col-md-6 my-3">
				<label for="Price">List Price:</label>
					<InputNumber step=".01" class="form-control col-11" @bind-Value="@Product.Price"/>
					<ValidationMessage For="@(() => Product.Price)" />	 
			</div>

		  <div class="form-group col-md-6 my-3">
				<label for="UnitCostOnPO">Unit Purchase Price (from PO):</label>
					<InputNumber step=".01" class="form-control col-11" @bind-Value="@Product.UnitCostOnPO"/>
					<ValidationMessage For="@(() => Product.UnitCostOnPO)" />	 
			</div>
		</div>

		<!--Qty-->

		<div class="form-row g-5">
			<div class="form-group col-md-6 my-3">
				<label for="ProductQtyOrdered">Product Quantity Ordered (from P.O.):</label>
					<InputNumber class="form-control col-11" @bind-Value="@Product.QtyOrderedOnPO"/>
					<ValidationMessage For="@(() => Product.QtyOrderedOnPO)" />	 
			</div>
			<div class="form-group col-md-6 my-3">
				<label for="ProductQtyInStock">Product Quantity In Stock:</label>
					<InputNumber step="25" class="form-control col-11" @bind-Value="@Product.QtyInStock"/>
					<ValidationMessage For="@(() => Product.QtyInStock)" />	 
			</div>
		</div>

		<!--Sales Event details-->

		<div class="form-row g-5">
		  <div class="form-group col-md-6 my-3">
				<label for="SalesEventStartDate">Sales Event Start Date:</label>
					<InputDate class="form-control col-11" 
						@bind-Value="@Product.SalesEventStartDate"/>
					<ValidationMessage For="@(() => Product.SalesEventStartDate)" />	 
			</div>
			<div class="form-group col-md-6 my-3">
				<label for="DaysToManufacture">Sales Event Length (in Days):</label>
					<InputNumber class="form-control col-11" 
						@bind-Value="@Product.SaleLengthInDays"
						DisplayName="Days To Manufacture"/>
					<ValidationMessage For="@(() => Product.SaleLengthInDays)" />	 
			</div>
		</div>

		<!--Dates-->
	  
		<div class="form-row g-5">
		  <div class="form-group col-md-6 my-3">
				<label for="SellStartDate">1st Date Product is Sold:</label>
					<InputDate class="form-control col-11" @bind-Value="@Product.SellStartDate"/>
					<ValidationMessage For="@(() => Product.SellStartDate)" />	 
			</div>

			<div class="form-group col-md-6 my-3">
				<label for="DiscontinuedDate">Product Discontinued Date:</label>
					<InputDate class="form-control col-11" @bind-Value="@Product.DiscontinuedDate"/>
					<ValidationMessage For="@(() => Product.DiscontinuedDate)" />	 
			</div>
		</div>

		<!--File upload-->

		<div class="form-row g-5">
			<InputImg Label="Main Product Image Upload:" 
				OnSelectedImage="PosterSelected" ImageURL="@imageURL" />
			<ValidationMessage For="@(() => Product.Poster)" />	 
		</div>

		<!--Product Video URL (YouTube)-->
		<div class="form-row g-5">
			<div class="form-group col-lg-6 my-3">
				<label for="Video">Product Video (YouTube URL):</label>
					<InputText class="form-control col-lg-11" 
						@bind-Value="@Product.Video"
						placeholder="Last URL segment, i.e.: sqt0k-A6ZT4" />
					<ValidationMessage For="@(() => Product.Video)" />	 
			</div>
		</div>
		
		<!--Summary Markdown-->

    <div class="form-group form-markdown mt-3 mx-0 px-0">
			<p>
        <InputMarkdown @bind-Value="Product.Summary" 
					LabelMarkup="Summary (product description):" 
					LabelPreview="Summary (markup preview):"
					For="@(() => Product.Summary)" />
			</p>
    </div>

		<!--Add or Remove Categories-->

		<div class="form-group">
			<label>Click individual Product Categories to Add or Remove them to this Product. 
					(Or) Add All and Remove All with the buttons:</label>
			<div>
				<MultipleSelector 
					Selected="Selected" 
					NotSelected="NotSelected" />
			</div>			
		</div>

		<!--TypeAhead Search-->

		<div class="form-group mb-5">

		<Collapsible 
			Title="" 
			ButtonText="Info" 
			LabelText="Search People & Assign Roles: " 
			Collapsed="true">

			<ChildContent>
				Find a person, add their role to the product (i.e.: Estimator, Foreman, Customer)
			</ChildContent>
		</Collapsible>

			<div>
				<MultipleSelectorTypeahead 
					Context="person" 
					SearchMethod="SearchMethod" 
					SelectedElements="SelectedPeople"
				>
					<MyResultTemplate>
						<img style="width: 50px;" src="@person.Photo" /> 
						@person.FullName
					</MyResultTemplate>

					<MyListTemplate>
						@person.FullName / <input type="text" placeholder="Role" @bind="person.Role" />
					</MyListTemplate>
				</MultipleSelectorTypeahead>
			</div>
		</div>

		<!--Submit Btn-->
		<button class="btn btn-success mb-5" type="submit">Submit</button>

	</EditForm>
</div>

@code {
	[Parameter] public Product Product { get; set; }
  [Parameter] public EventCallback OnValidSubmit { get; set; }
	//need to pass notselected and selected params to component
	[Parameter] public List<Category> SelectedCategories { get; set; } = new List<Category>();
	[Parameter] public List<Category> NotSelectedCategories { get; set; } = new List<Category>();
	[Parameter] public List<Person> SelectedPeople { get; set; } = new List<Person>();


	private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
  private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

	private string imageURL;
	
	protected override void OnInitialized()
	{

		Selected = SelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
		NotSelected = NotSelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();

		//make it so both photo boxes do not show at same time.
		if (!string.IsNullOrEmpty(Product.Poster))
		{
			imageURL = Product.Poster;
			Product.Poster = null;
		}
	}

	private void PosterSelected(string imageBase64)
	{
		Product.Poster = imageBase64;
		imageURL = null;
		Console.WriteLine(imageBase64);
	}

	//omni search / typeahead hookup to data	
	private async Task<IEnumerable<Person>> SearchMethod(string searchText)
	{
		return await personRepository.GetPeopleByName(searchText);
  }

	private async Task OnDataAnnotationsValidated()
	{
		Product.ProductsCategories = Selected.Select(x =>
			new ProductsCategories { CategoryId = int.Parse(x.Key) }).ToList();

		Product.ProductsPeople = SelectedPeople.Select(x =>
			new ProductsPeople { PersonId = x.Id, Role = x.Role }).ToList();

		if(!string.IsNullOrWhiteSpace(Product.Poster)) { imageURL = null; }

		await OnValidSubmit.InvokeAsync(null);
	}
} 