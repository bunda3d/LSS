
<div class="form my-4">
	<EditForm Model="Product" OnValidSubmit="OnDataAnnotationsValidated">
		<DataAnnotationsValidator />

		<!--IDs-->
		<div class="form-group">
			<p>		 
				<label for="ProductNumber">Product Number:
					<InputNumber class="form-control" @bind-Value="@Product.ProductNumber"/>
					<ValidationMessage For="@(() => Product.ProductNumber)" />	 
				</label>
			</p>
		</div>

		<div class="form-group">
			<p>		 
				<label for="Title">Title:
					<InputText class="form-control" @bind-Value="@Product.Title"/>
					<ValidationMessage For="@(() => Product.Title)" />	 
				</label>
			</p>
		</div>
		
		<!--Sales Switches-->


		  <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.IsMarkedDownFlag" 
            class="custom-control-input" id="isMarkedDownFlag">

			    <label class="custom-control-label" for="isMarkedDownFlag">
            Sale Item? (marked-down up-to 25%)
          </label>
        </div>
		  </div>

      <div class="col form-group my-4 p-0">
        <div class="custom-control custom-switch">
			    <input type="checkbox" @bind="@Product.OnClearanceFlag" 
            class="custom-control-input" id="onClearanceFlag">

			    <label class="custom-control-label" for="onClearanceFlag">
            Clearance Item? (marked-down over 25%)
          </label>
        </div>
		  </div>
    

		<!--Price-->

		<div class="col-sm-12 col-md-6 col-lg-4 form-group my-3 p-0">
			<div class="form-group">
				<p>		 
					<label for="Price">List Price:
						<InputNumber step=".01" class="form-control form-control-xs" @bind-Value="@Product.Price"/>
						<ValidationMessage For="@(() => Product.Price)" />	 
					</label>
				</p>
			</div>
		</div>

		<div class="col-sm-12 col-md-6 col-lg-4 form-group my-3 p-0">
			<div class="form-group">
				<p>		 
					<label for="DaysToManufacture">Days To Manufacture:
						<InputNumber class="form-control" @bind-Value="@Product.DaysToManufacture"/>
						<ValidationMessage For="@(() => Product.DaysToManufacture)" />	 
					</label>
				</p>
			</div>
		</div>

		<!--Dates-->
	  
		<div class="row">
		  <div class="col-sm col-md-6 col-lg-4 col-xl-3 form-group my-3">
				<div class="form-group">
					<p>		 
						<label for="SellStartDate">Sell Start Date:
							<InputDate class="form-control" @bind-Value="@Product.SellStartDate"/>
							<ValidationMessage For="@(() => Product.SellStartDate)" />	 
						</label>
					</p>
				</div>
			</div>
			<div class="col-sm col-md-6 col-lg-4 col-xl-3 form-group my-3">
				<div class="form-group">
					<p>		 
						<label for="DiscontinuedDate">Discontinued Date:
							<InputDate class="form-control" @bind-Value="@Product.DiscontinuedDate"/>
							<ValidationMessage For="@(() => Product.DiscontinuedDate)" />	 
						</label>
					</p>
				</div>
			</div>
	</div>

		<!--File upload-->
	  
		<div class="form-group">
			<p>
				<InputImg Label="Main Product Image Upload:" 
					OnSelectedImage="PosterSelected" ImageURL="@imageURL" />
				<ValidationMessage For="@(() => Product.Poster)" />	 
			</p>
		</div>

		<!--Product Video URL (YouTube)-->
		
		<div class="form-group">
			<p>		 
				<label for="Video">Product Video (YouTube URL):
					<InputText class="form-control" @bind-Value="@Product.Video"/>
					<ValidationMessage For="@(() => Product.Video)" />	 
				</label>
			</p>
		</div>
		
		<!--Summary Markdown-->

    <div class="form-group form-markdown mt-3 mx-0 px-0">
			<p>
        <InputMarkdown @bind-Value="Product.Summary" 
					LabelMarkup="Summary (write a product description in Markdown):" 
					LabelPreview="Summary (Preview):"
					For="@(() => Product.Summary)" />
			</p>
    </div>

		<!--Add or Remove Categories-->

		<div class="form-group">
			<label>Click individual Product Categories to Add or Remove them to this Product. 
					(Or) Add All and Remove All with the buttons:</label>
			<div>
				<MultipleSelector 
					Selected="Selected" 
					NotSelected="NotSelected" />
			</div>			
		</div>

		<div class="form-group mb-3">
			<label>Products Search: </label>
			<div>
				<MultipleSelectorTypeahead Context="Person" SearchMethod="SearchMethod" SelectedElements="SelectedPeople">
					<MyResultTemplate>
						<img style="width: 50px;" src="@Person.Photo" /> 
						$(@Person.NameFirst @Person.NameLast);
					</MyResultTemplate>
						
					<MyListTemplate>
						@Person.FullName / <Input type="text" placeholder="Role" @bind="Person.Role" />
					</MyListTemplate>
				</MultipleSelectorTypeahead>
			</div>
		</div>


		<!--Submit Btn-->
		<button class="btn btn-success mb-5" type="submit">Submit</button>

	</EditForm>
</div>

@code {
	[Parameter] public Product Product { get; set; }
  [Parameter] public EventCallback OnValidSubmit { get; set; }
	//need to pass notselected and selected params to component
	[Parameter] public List<Category> SelectedCategories { get; set; } = new List<Category>();
	[Parameter] public List<Category> NotSelectedCategories { get; set; } = new List<Category>();
	[Parameter] public List<Person> SelectedPeople { get; set; } = new List<Person>();


	private List<MultipleSelectorModel> Selected = new List<MultipleSelectorModel>();
  private List<MultipleSelectorModel> NotSelected = new List<MultipleSelectorModel>();

	private string imageURL;
	
	protected override void OnInitialized()
	{

		Selected = SelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();
		NotSelected = NotSelectedCategories.Select(x => new MultipleSelectorModel(x.Id.ToString(), x.Name)).ToList();

		//make it so both photo boxes do not show at same time.
		if (!string.IsNullOrEmpty(Product.Poster))
		{
			imageURL = Product.Poster;
			Product.Poster = null;
		}
	}
	private void PosterSelected(string imageBase64)
	{
		Product.Poster = imageBase64;
		imageURL = null;
		Console.WriteLine(imageBase64);
	}

	//dummy omni search / typeahead data	
	private async Task<IEnumerable<Person>> SearchMethod(string searchText)
	{
		return new List<Person>()
		{
			new Person() { Id= 1, NameFirst= "Kris", NameLast= "Bunda", Photo="https://images.express.com/is/image/expressfashion/0039_04372511_0098_f042?cache=on&wid=960&fmt=jpeg&qlt=85,1&resmode=sharp2&op_usm=1,1,5,0&defaultImage=Photo-Coming-Soon.jpg"	},
			new Person() { Id= 2, NameFirst= "Tom", NameLast= "Joad", Photo="https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iKxSKNo1BXGM/v0/-1x-1.jpg"		},
			new Person() { Id= 3, NameFirst= "Miss", NameLast= "Kitten", Photo="https://ae01.alicdn.com/kf/HTB1EZAeXjLuK1Rjy0Fhq6xpdFXaw/Fashion-Sashes-Black-Striped-Women-pant-suit-Office-work-wearing-suit-Solid-White-black-OL-Career.jpg" }
		};
  }

	private async void OnDataAnnotationsValidated()
	{
		Product.ProductsCategories = Selected.Select(x =>
			new ProductsCategories { CategoryId = int.Parse(x.Key) }).ToList();

		Product.ProductsPeople = Selected.Select(x =>
			new ProductsPeople { PersonId = int.Parse(x.Key) }).ToList();

		if(!string.IsNullOrWhiteSpace(Product.Poster)) { imageURL = null; }

		await OnValidSubmit.InvokeAsync(null);
	}

}